// There are 2 main pointer types:
//   - Owning pointers (OPtr): default for memory management
//   - Observer pointers (_*): reference to something else
//
// There are an additional 2 types, less used:
//   - Shared pointers (SharedPtr)
//   - Weak pointers (WeakPtr) to solve issues with shared pointers
fun main(val args: String...) {
  mut myInt : Int32 = 3;
  // Take the address of myInt.
  val pInt : mut Int32* = &myInt;
  // Modify the value pointed by pInt, which is myInt.
  *pInt = 1;
  // Prints 1.
  println(myInt);

  // Here, we said that cpInt would not be able to modify the underlying type.
  val cpInt : Int32* = &a;
  // It is illegal to modify the value pointed by cpInt:
  // *cpInt = 2;
  // But we can still read it:
  println(*cpInt); // Same as println(myInt);

  // We can even have a pointer to a pointer! Here's the syntax:
  val ppInt : mut Int32** = &pInt;
  // Notice here that pInt was declared as "val". If it had been declared as
  // "mut", the type would have been "mut Int32 mut* *".


  // An OPtr is a pointer to an allocated part of the memory.
  // It corresponds to the C++ unique_ptr.
  // It is created with the (template) function "make", which takes the arguments
  // to the constructor of the object to create. "make" allocates the memory,
  // creates the object, returns an OPtr pointing to that area.
  // When the OPtr is destroyed, it destroys the pointed object, and frees the
  // memory.
  var optr : OPtr<Int32> = make<Int32>(4);

  // We can now use optr like a normal pointer:
  *optr = 3;
  println(*optr);

  // We can also get a normal pointer from optr:
  val rawPtr : mut Int32* = optr.ptr();



  // So far, the only sources of pointers are taking the address of local
  // variables, and creating owned pointers. Another one comes from using
  // Vectors, or Arrays. They are a contiguous zone of memory that we can
  // access, either of variable size (Vector) or fixed size (Array).
  var intVec = Vector<Int32>();
  intVec.append(3);
  intVec.append(4);
  val last = &intVec[1];
  println(*last); // Prints 4.

  // There's one last source of pointers, which is "null". But we'll talk about
  // that later.

}
